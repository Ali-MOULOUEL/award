// Generated by gencpp from file rds_anticollision/motion.msg
// DO NOT EDIT!


#ifndef RDS_ANTICOLLISION_MESSAGE_MOTION_H
#define RDS_ANTICOLLISION_MESSAGE_MOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_anticollision
{
template <class ContainerAllocator>
struct motion_
{
  typedef motion_<ContainerAllocator> Type;

  motion_()
    : motion(0)  {
    }
  motion_(const ContainerAllocator& _alloc)
    : motion(0)  {
  (void)_alloc;
    }



   typedef uint8_t _motion_type;
  _motion_type motion;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOTION_UNKNOWN)
  #undef MOTION_UNKNOWN
#endif
#if defined(_WIN32) && defined(MOTION_MOVING)
  #undef MOTION_MOVING
#endif
#if defined(_WIN32) && defined(MOTION_NULL_SPEED)
  #undef MOTION_NULL_SPEED
#endif
#if defined(_WIN32) && defined(MOTION_PARKED)
  #undef MOTION_PARKED
#endif

  enum {
    MOTION_UNKNOWN = 0u,
    MOTION_MOVING = 1u,
    MOTION_NULL_SPEED = 2u,
    MOTION_PARKED = 3u,
  };


  typedef boost::shared_ptr< ::rds_anticollision::motion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_anticollision::motion_<ContainerAllocator> const> ConstPtr;

}; // struct motion_

typedef ::rds_anticollision::motion_<std::allocator<void> > motion;

typedef boost::shared_ptr< ::rds_anticollision::motion > motionPtr;
typedef boost::shared_ptr< ::rds_anticollision::motion const> motionConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_anticollision::motion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_anticollision::motion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_anticollision::motion_<ContainerAllocator1> & lhs, const ::rds_anticollision::motion_<ContainerAllocator2> & rhs)
{
  return lhs.motion == rhs.motion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_anticollision::motion_<ContainerAllocator1> & lhs, const ::rds_anticollision::motion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_anticollision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::motion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::motion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::motion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::motion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_anticollision::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b51040594c3742731f9d75a1c817e1f9";
  }

  static const char* value(const ::rds_anticollision::motion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb51040594c374273ULL;
  static const uint64_t static_value2 = 0x1f9d75a1c817e1f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_anticollision::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_anticollision/motion";
  }

  static const char* value(const ::rds_anticollision::motion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_anticollision::motion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Motion type\n"
"uint8 MOTION_UNKNOWN = 0\n"
"uint8 MOTION_MOVING = 1\n"
"uint8 MOTION_NULL_SPEED = 2\n"
"uint8 MOTION_PARKED = 3\n"
"\n"
"uint8 motion\n"
;
  }

  static const char* value(const ::rds_anticollision::motion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_anticollision::motion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_anticollision::motion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_anticollision::motion_<ContainerAllocator>& v)
  {
    s << indent << "motion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_ANTICOLLISION_MESSAGE_MOTION_H
