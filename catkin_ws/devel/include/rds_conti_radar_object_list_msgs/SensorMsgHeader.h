// Generated by gencpp from file rds_conti_radar_object_list_msgs/SensorMsgHeader.msg
// DO NOT EDIT!


#ifndef RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SENSORMSGHEADER_H
#define RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SENSORMSGHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rds_conti_radar_object_list_msgs/MsgHeader.h>
#include <rds_conti_radar_object_list_msgs/SignalStatus.h>

namespace rds_conti_radar_object_list_msgs
{
template <class ContainerAllocator>
struct SensorMsgHeader_
{
  typedef SensorMsgHeader_<ContainerAllocator> Type;

  SensorMsgHeader_()
    : CommonHeader()
    , SensorId(0)
    , SignalStatus()  {
    }
  SensorMsgHeader_(const ContainerAllocator& _alloc)
    : CommonHeader(_alloc)
    , SensorId(0)
    , SignalStatus(_alloc)  {
  (void)_alloc;
    }



   typedef  ::rds_conti_radar_object_list_msgs::MsgHeader_<ContainerAllocator>  _CommonHeader_type;
  _CommonHeader_type CommonHeader;

   typedef uint32_t _SensorId_type;
  _SensorId_type SensorId;

   typedef  ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator>  _SignalStatus_type;
  _SignalStatus_type SignalStatus;





  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> const> ConstPtr;

}; // struct SensorMsgHeader_

typedef ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<std::allocator<void> > SensorMsgHeader;

typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SensorMsgHeader > SensorMsgHeaderPtr;
typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SensorMsgHeader const> SensorMsgHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator2> & rhs)
{
  return lhs.CommonHeader == rhs.CommonHeader &&
    lhs.SensorId == rhs.SensorId &&
    lhs.SignalStatus == rhs.SignalStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_conti_radar_object_list_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c61f492b9657164b862e05bce5436fda";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc61f492b9657164bULL;
  static const uint64_t static_value2 = 0x862e05bce5436fdaULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_conti_radar_object_list_msgs/SensorMsgHeader";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#SensorMsgHeader fields\n"
"MsgHeader CommonHeader\n"
"uint32 SensorId             #sensor ID\n"
"SignalStatus SignalStatus   #status of the signals in the data packet\n"
"================================================================================\n"
"MSG: rds_conti_radar_object_list_msgs/MsgHeader\n"
"#MsgHeader fields\n"
"uint32 Seq          #sequence ID: consecutively increasing ID\n"
"Time stamp\n"
"TimeStampSource Timestamp_source\n"
"TimeStampSyncState TimeStamp_sync_state\n"
"\n"
"================================================================================\n"
"MSG: rds_conti_radar_object_list_msgs/Time\n"
"#Time fields\n"
"uint32 Sec\n"
"uint32 Nsec \n"
"\n"
"================================================================================\n"
"MSG: rds_conti_radar_object_list_msgs/TimeStampSource\n"
"#MsgHeader field TimeStampSource\n"
"uint8 TIMESTAMPSOURCE_UNKNOWN_SOURCE = 0    #No information on the source at all\n"
"uint8 TIMESTAMPSOURCE_SENSOR = 1            #Timestamp is set by sensor\n"
"uint8 TIMESTAMPSOURCE_ALGO = 2              #Timestamp is set by algo\n"
"\n"
"uint8 TimeStampSource \n"
"================================================================================\n"
"MSG: rds_conti_radar_object_list_msgs/TimeStampSyncState\n"
"#MsgHeader field TimeStampSyncState\n"
"uint8 TIMESTAMPSYNCSTATE_UNKNOWN_SYNC = 0              #No information on the sync state at all\n"
"uint8 TIMESTAMPSYNCSTATE_NOT_SYNCED = 1                #timestamp is not synced at all\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_GTC = 2                #timestamp is synced with GTC mechanism\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_PTP = 3                #timestamp is synced with PTP mechanism\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_REPLAY = 4             #timestamp is synced by replay mechanism\n"
"\n"
"uint8 TimeStampSyncState\n"
"\n"
"================================================================================\n"
"MSG: rds_conti_radar_object_list_msgs/SignalStatus\n"
"#SensorMsgHeader SignalStatus field\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_INIT = 0\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_OK = 1\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_INVALID = 2\n"
"\n"
"uint8 SignalStatus\n"
;
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CommonHeader);
      stream.next(m.SensorId);
      stream.next(m.SignalStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorMsgHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_conti_radar_object_list_msgs::SensorMsgHeader_<ContainerAllocator>& v)
  {
    s << indent << "CommonHeader: ";
    s << std::endl;
    Printer< ::rds_conti_radar_object_list_msgs::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.CommonHeader);
    s << indent << "SensorId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SensorId);
    s << indent << "SignalStatus: ";
    s << std::endl;
    Printer< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.SignalStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SENSORMSGHEADER_H
