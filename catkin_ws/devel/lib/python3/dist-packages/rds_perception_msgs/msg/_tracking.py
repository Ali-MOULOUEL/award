# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rds_perception_msgs/tracking.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rds_perception_msgs.msg
import std_msgs.msg

class tracking(genpy.Message):
  _md5sum = "a03ed08238f2e628af885c6ceb7c7f9a"
  _type = "rds_perception_msgs/tracking"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

track[] tracks

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rds_perception_msgs/track
uint32 id            # unique identifier of the track
float32[] state      # state
float32[] covariance # covariance
label label            # type of the track
extent extent        # extent model for the track shape representation
float64 uptime
float64 misstime
float32 box_center_x # box center
float32 box_center_y # box center
float32 axis_1x      # main axis of the box
float32 axis_1y      # main axis of the box
float32 axis_2x      # secondary axis of the box
float32 axis_2y       # secondary axis of the box
float32 dim1         # dimension of box along main axis or radius of the circle
float32 dim2         # dimension of box along secondary axis (or radius of the circle)

================================================================================
MSG: rds_perception_msgs/label
# Tracking object type
uint8 LABEL_INVALID = 0
uint8 LABEL_UNKNOWN = 1
uint8 LABEL_CAR = 2
uint8 LABEL_PEDESTRIAN = 3
uint8 LABEL_BIKE = 4

uint8 label

================================================================================
MSG: rds_perception_msgs/extent
# Tracking extent type
uint8 EXTENT_ELLIPSE = 0
uint8 EXTENT_OBB = 1

uint8 extent
"""
  __slots__ = ['header','tracks']
  _slot_types = ['std_msgs/Header','rds_perception_msgs/track[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tracks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(tracking, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tracks is None:
        self.tracks = []
    else:
      self.header = std_msgs.msg.Header()
      self.tracks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracks:
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.state)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.state))
        length = len(val1.covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.covariance))
        _v1 = val1.label
        _x = _v1.label
        buff.write(_get_struct_B().pack(_x))
        _v2 = val1.extent
        _x = _v2.extent
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_2d8f().pack(_x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tracks is None:
        self.tracks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracks = []
      for i in range(0, length):
        val1 = rds_perception_msgs.msg.track()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.state = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.covariance = s.unpack(str[start:end])
        _v3 = val1.label
        start = end
        end += 1
        (_v3.label,) = _get_struct_B().unpack(str[start:end])
        _v4 = val1.extent
        start = end
        end += 1
        (_v4.extent,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2,) = _get_struct_2d8f().unpack(str[start:end])
        self.tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tracks)
      buff.write(_struct_I.pack(length))
      for val1 in self.tracks:
        _x = val1.id
        buff.write(_get_struct_I().pack(_x))
        length = len(val1.state)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.state.tostring())
        length = len(val1.covariance)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.covariance.tostring())
        _v5 = val1.label
        _x = _v5.label
        buff.write(_get_struct_B().pack(_x))
        _v6 = val1.extent
        _x = _v6.extent
        buff.write(_get_struct_B().pack(_x))
        _x = val1
        buff.write(_get_struct_2d8f().pack(_x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tracks is None:
        self.tracks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tracks = []
      for i in range(0, length):
        val1 = rds_perception_msgs.msg.track()
        start = end
        end += 4
        (val1.id,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.state = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v7 = val1.label
        start = end
        end += 1
        (_v7.label,) = _get_struct_B().unpack(str[start:end])
        _v8 = val1.extent
        start = end
        end += 1
        (_v8.extent,) = _get_struct_B().unpack(str[start:end])
        _x = val1
        start = end
        end += 48
        (_x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2,) = _get_struct_2d8f().unpack(str[start:end])
        self.tracks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d8f = None
def _get_struct_2d8f():
    global _struct_2d8f
    if _struct_2d8f is None:
        _struct_2d8f = struct.Struct("<2d8f")
    return _struct_2d8f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
