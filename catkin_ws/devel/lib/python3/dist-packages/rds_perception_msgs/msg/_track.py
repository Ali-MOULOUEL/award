# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rds_perception_msgs/track.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rds_perception_msgs.msg

class track(genpy.Message):
  _md5sum = "f8e1e3a8013bff6348f166fe006c2c91"
  _type = "rds_perception_msgs/track"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 id            # unique identifier of the track
float32[] state      # state
float32[] covariance # covariance
label label            # type of the track
extent extent        # extent model for the track shape representation
float64 uptime
float64 misstime
float32 box_center_x # box center
float32 box_center_y # box center
float32 axis_1x      # main axis of the box
float32 axis_1y      # main axis of the box
float32 axis_2x      # secondary axis of the box
float32 axis_2y       # secondary axis of the box
float32 dim1         # dimension of box along main axis or radius of the circle
float32 dim2         # dimension of box along secondary axis (or radius of the circle)

================================================================================
MSG: rds_perception_msgs/label
# Tracking object type
uint8 LABEL_INVALID = 0
uint8 LABEL_UNKNOWN = 1
uint8 LABEL_CAR = 2
uint8 LABEL_PEDESTRIAN = 3
uint8 LABEL_BIKE = 4

uint8 label

================================================================================
MSG: rds_perception_msgs/extent
# Tracking extent type
uint8 EXTENT_ELLIPSE = 0
uint8 EXTENT_OBB = 1

uint8 extent
"""
  __slots__ = ['id','state','covariance','label','extent','uptime','misstime','box_center_x','box_center_y','axis_1x','axis_1y','axis_2x','axis_2y','dim1','dim2']
  _slot_types = ['uint32','float32[]','float32[]','rds_perception_msgs/label','rds_perception_msgs/extent','float64','float64','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,state,covariance,label,extent,uptime,misstime,box_center_x,box_center_y,axis_1x,axis_1y,axis_2x,axis_2y,dim1,dim2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(track, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.state is None:
        self.state = []
      if self.covariance is None:
        self.covariance = []
      if self.label is None:
        self.label = rds_perception_msgs.msg.label()
      if self.extent is None:
        self.extent = rds_perception_msgs.msg.extent()
      if self.uptime is None:
        self.uptime = 0.
      if self.misstime is None:
        self.misstime = 0.
      if self.box_center_x is None:
        self.box_center_x = 0.
      if self.box_center_y is None:
        self.box_center_y = 0.
      if self.axis_1x is None:
        self.axis_1x = 0.
      if self.axis_1y is None:
        self.axis_1y = 0.
      if self.axis_2x is None:
        self.axis_2x = 0.
      if self.axis_2y is None:
        self.axis_2y = 0.
      if self.dim1 is None:
        self.dim1 = 0.
      if self.dim2 is None:
        self.dim2 = 0.
    else:
      self.id = 0
      self.state = []
      self.covariance = []
      self.label = rds_perception_msgs.msg.label()
      self.extent = rds_perception_msgs.msg.extent()
      self.uptime = 0.
      self.misstime = 0.
      self.box_center_x = 0.
      self.box_center_y = 0.
      self.axis_1x = 0.
      self.axis_1y = 0.
      self.axis_2x = 0.
      self.axis_2y = 0.
      self.dim1 = 0.
      self.dim2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.state))
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.covariance))
      _x = self
      buff.write(_get_struct_2B2d8f().pack(_x.label.label, _x.extent.extent, _x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.label is None:
        self.label = rds_perception_msgs.msg.label()
      if self.extent is None:
        self.extent = rds_perception_msgs.msg.extent()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covariance = s.unpack(str[start:end])
      _x = self
      start = end
      end += 50
      (_x.label.label, _x.extent.extent, _x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2,) = _get_struct_2B2d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      buff.write(_get_struct_I().pack(_x))
      length = len(self.state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.state.tostring())
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.covariance.tostring())
      _x = self
      buff.write(_get_struct_2B2d8f().pack(_x.label.label, _x.extent.extent, _x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.label is None:
        self.label = rds_perception_msgs.msg.label()
      if self.extent is None:
        self.extent = rds_perception_msgs.msg.extent()
      end = 0
      start = end
      end += 4
      (self.id,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.state = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 50
      (_x.label.label, _x.extent.extent, _x.uptime, _x.misstime, _x.box_center_x, _x.box_center_y, _x.axis_1x, _x.axis_1y, _x.axis_2x, _x.axis_2y, _x.dim1, _x.dim2,) = _get_struct_2B2d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2d8f = None
def _get_struct_2B2d8f():
    global _struct_2B2d8f
    if _struct_2B2d8f is None:
        _struct_2B2d8f = struct.Struct("<2B2d8f")
    return _struct_2B2d8f
