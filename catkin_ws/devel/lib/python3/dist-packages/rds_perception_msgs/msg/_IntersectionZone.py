# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rds_perception_msgs/IntersectionZone.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rds_perception_msgs.msg

class IntersectionZone(genpy.Message):
  _md5sum = "42dde0da16a1fa71a8c22e5108233e9c"
  _type = "rds_perception_msgs/IntersectionZone"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 PROVIDER_PERCEPTION = 1
uint8 PROVIDER_ADS_B = 2
uint8 provider

#geometry_msgs/Polygon area

# Filled only when provider is perception based
rds_perception_msgs/label[] ignored_blind_obstacles

================================================================================
MSG: rds_perception_msgs/label
# Tracking object type
uint8 LABEL_INVALID = 0
uint8 LABEL_UNKNOWN = 1
uint8 LABEL_CAR = 2
uint8 LABEL_PEDESTRIAN = 3
uint8 LABEL_BIKE = 4

uint8 label
"""
  # Pseudo-constants
  PROVIDER_PERCEPTION = 1
  PROVIDER_ADS_B = 2

  __slots__ = ['provider','ignored_blind_obstacles']
  _slot_types = ['uint8','rds_perception_msgs/label[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       provider,ignored_blind_obstacles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IntersectionZone, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.provider is None:
        self.provider = 0
      if self.ignored_blind_obstacles is None:
        self.ignored_blind_obstacles = []
    else:
      self.provider = 0
      self.ignored_blind_obstacles = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.provider
      buff.write(_get_struct_B().pack(_x))
      length = len(self.ignored_blind_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.ignored_blind_obstacles:
        _x = val1.label
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ignored_blind_obstacles is None:
        self.ignored_blind_obstacles = None
      end = 0
      start = end
      end += 1
      (self.provider,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ignored_blind_obstacles = []
      for i in range(0, length):
        val1 = rds_perception_msgs.msg.label()
        start = end
        end += 1
        (val1.label,) = _get_struct_B().unpack(str[start:end])
        self.ignored_blind_obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.provider
      buff.write(_get_struct_B().pack(_x))
      length = len(self.ignored_blind_obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.ignored_blind_obstacles:
        _x = val1.label
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ignored_blind_obstacles is None:
        self.ignored_blind_obstacles = None
      end = 0
      start = end
      end += 1
      (self.provider,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ignored_blind_obstacles = []
      for i in range(0, length):
        val1 = rds_perception_msgs.msg.label()
        start = end
        end += 1
        (val1.label,) = _get_struct_B().unpack(str[start:end])
        self.ignored_blind_obstacles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
