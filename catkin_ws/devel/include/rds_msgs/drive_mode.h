// Generated by gencpp from file rds_msgs/drive_mode.msg
// DO NOT EDIT!


#ifndef RDS_MSGS_MESSAGE_DRIVE_MODE_H
#define RDS_MSGS_MESSAGE_DRIVE_MODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_msgs
{
template <class ContainerAllocator>
struct drive_mode_
{
  typedef drive_mode_<ContainerAllocator> Type;

  drive_mode_()
    : drive_mode(0)  {
    }
  drive_mode_(const ContainerAllocator& _alloc)
    : drive_mode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _drive_mode_type;
  _drive_mode_type drive_mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DRIVE_MODE_MANUAL)
  #undef DRIVE_MODE_MANUAL
#endif
#if defined(_WIN32) && defined(DRIVE_MODE_AUTOMATIC)
  #undef DRIVE_MODE_AUTOMATIC
#endif
#if defined(_WIN32) && defined(DRIVE_MODE_TELEOPERATION)
  #undef DRIVE_MODE_TELEOPERATION
#endif

  enum {
    DRIVE_MODE_MANUAL = 0u,
    DRIVE_MODE_AUTOMATIC = 1u,
    DRIVE_MODE_TELEOPERATION = 2u,
  };


  typedef boost::shared_ptr< ::rds_msgs::drive_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_msgs::drive_mode_<ContainerAllocator> const> ConstPtr;

}; // struct drive_mode_

typedef ::rds_msgs::drive_mode_<std::allocator<void> > drive_mode;

typedef boost::shared_ptr< ::rds_msgs::drive_mode > drive_modePtr;
typedef boost::shared_ptr< ::rds_msgs::drive_mode const> drive_modeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_msgs::drive_mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_msgs::drive_mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_msgs::drive_mode_<ContainerAllocator1> & lhs, const ::rds_msgs::drive_mode_<ContainerAllocator2> & rhs)
{
  return lhs.drive_mode == rhs.drive_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_msgs::drive_mode_<ContainerAllocator1> & lhs, const ::rds_msgs::drive_mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_msgs::drive_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_msgs::drive_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_msgs::drive_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_msgs::drive_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_msgs::drive_mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_msgs::drive_mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_msgs::drive_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44ef9e5eb7a21f58b8d93028b36ad4e5";
  }

  static const char* value(const ::rds_msgs::drive_mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44ef9e5eb7a21f58ULL;
  static const uint64_t static_value2 = 0xb8d93028b36ad4e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_msgs::drive_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_msgs/drive_mode";
  }

  static const char* value(const ::rds_msgs::drive_mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_msgs::drive_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DRIVE_MODE_MANUAL = 0 \n"
"uint8 DRIVE_MODE_AUTOMATIC = 1\n"
"uint8 DRIVE_MODE_TELEOPERATION = 2\n"
"\n"
"uint8 drive_mode\n"
;
  }

  static const char* value(const ::rds_msgs::drive_mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_msgs::drive_mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drive_mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_msgs::drive_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_msgs::drive_mode_<ContainerAllocator>& v)
  {
    s << indent << "drive_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_MSGS_MESSAGE_DRIVE_MODE_H
