// Generated by gencpp from file rds_conti_radar_object_list_msgs/SignalStatus.msg
// DO NOT EDIT!


#ifndef RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SIGNALSTATUS_H
#define RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SIGNALSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_conti_radar_object_list_msgs
{
template <class ContainerAllocator>
struct SignalStatus_
{
  typedef SignalStatus_<ContainerAllocator> Type;

  SignalStatus_()
    : SignalStatus(0)  {
    }
  SignalStatus_(const ContainerAllocator& _alloc)
    : SignalStatus(0)  {
  (void)_alloc;
    }



   typedef uint8_t _SignalStatus_type;
  _SignalStatus_type SignalStatus;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SIGNALSTATUS_EM_SIGSTATE_INIT)
  #undef SIGNALSTATUS_EM_SIGSTATE_INIT
#endif
#if defined(_WIN32) && defined(SIGNALSTATUS_EM_SIGSTATE_OK)
  #undef SIGNALSTATUS_EM_SIGSTATE_OK
#endif
#if defined(_WIN32) && defined(SIGNALSTATUS_EM_SIGSTATE_INVALID)
  #undef SIGNALSTATUS_EM_SIGSTATE_INVALID
#endif

  enum {
    SIGNALSTATUS_EM_SIGSTATE_INIT = 0u,
    SIGNALSTATUS_EM_SIGSTATE_OK = 1u,
    SIGNALSTATUS_EM_SIGSTATE_INVALID = 2u,
  };


  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SignalStatus_

typedef ::rds_conti_radar_object_list_msgs::SignalStatus_<std::allocator<void> > SignalStatus;

typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SignalStatus > SignalStatusPtr;
typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::SignalStatus const> SignalStatusConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator2> & rhs)
{
  return lhs.SignalStatus == rhs.SignalStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_conti_radar_object_list_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "896b07484a13b3414e94543ebb8cffac";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x896b07484a13b341ULL;
  static const uint64_t static_value2 = 0x4e94543ebb8cffacULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_conti_radar_object_list_msgs/SignalStatus";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#SensorMsgHeader SignalStatus field\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_INIT = 0\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_OK = 1\n"
"uint8 SIGNALSTATUS_EM_SIGSTATE_INVALID = 2\n"
"\n"
"uint8 SignalStatus\n"
;
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SignalStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SignalStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_conti_radar_object_list_msgs::SignalStatus_<ContainerAllocator>& v)
  {
    s << indent << "SignalStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SignalStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_SIGNALSTATUS_H
