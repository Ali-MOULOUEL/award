// Generated by gencpp from file foresight_outputs/BoundBox.msg
// DO NOT EDIT!


#ifndef FORESIGHT_OUTPUTS_MESSAGE_BOUNDBOX_H
#define FORESIGHT_OUTPUTS_MESSAGE_BOUNDBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace foresight_outputs
{
template <class ContainerAllocator>
struct BoundBox_
{
  typedef BoundBox_<ContainerAllocator> Type;

  BoundBox_()
    : BottomRightX(0.0)
    , BottomRightY(0.0)
    , TopLeftX(0.0)
    , TopLeftY(0.0)  {
    }
  BoundBox_(const ContainerAllocator& _alloc)
    : BottomRightX(0.0)
    , BottomRightY(0.0)
    , TopLeftX(0.0)
    , TopLeftY(0.0)  {
  (void)_alloc;
    }



   typedef float _BottomRightX_type;
  _BottomRightX_type BottomRightX;

   typedef float _BottomRightY_type;
  _BottomRightY_type BottomRightY;

   typedef float _TopLeftX_type;
  _TopLeftX_type TopLeftX;

   typedef float _TopLeftY_type;
  _TopLeftY_type TopLeftY;





  typedef boost::shared_ptr< ::foresight_outputs::BoundBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::foresight_outputs::BoundBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundBox_

typedef ::foresight_outputs::BoundBox_<std::allocator<void> > BoundBox;

typedef boost::shared_ptr< ::foresight_outputs::BoundBox > BoundBoxPtr;
typedef boost::shared_ptr< ::foresight_outputs::BoundBox const> BoundBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::foresight_outputs::BoundBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::foresight_outputs::BoundBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::foresight_outputs::BoundBox_<ContainerAllocator1> & lhs, const ::foresight_outputs::BoundBox_<ContainerAllocator2> & rhs)
{
  return lhs.BottomRightX == rhs.BottomRightX &&
    lhs.BottomRightY == rhs.BottomRightY &&
    lhs.TopLeftX == rhs.TopLeftX &&
    lhs.TopLeftY == rhs.TopLeftY;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::foresight_outputs::BoundBox_<ContainerAllocator1> & lhs, const ::foresight_outputs::BoundBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace foresight_outputs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::foresight_outputs::BoundBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::foresight_outputs::BoundBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foresight_outputs::BoundBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::foresight_outputs::BoundBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foresight_outputs::BoundBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::foresight_outputs::BoundBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::foresight_outputs::BoundBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d17ab06cbfb1e620b89068c14f0e9d84";
  }

  static const char* value(const ::foresight_outputs::BoundBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd17ab06cbfb1e620ULL;
  static const uint64_t static_value2 = 0xb89068c14f0e9d84ULL;
};

template<class ContainerAllocator>
struct DataType< ::foresight_outputs::BoundBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "foresight_outputs/BoundBox";
  }

  static const char* value(const ::foresight_outputs::BoundBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::foresight_outputs::BoundBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#BoundBox field\n"
"float32 BottomRightX\n"
"float32 BottomRightY\n"
"float32 TopLeftX\n"
"float32 TopLeftY\n"
;
  }

  static const char* value(const ::foresight_outputs::BoundBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::foresight_outputs::BoundBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BottomRightX);
      stream.next(m.BottomRightY);
      stream.next(m.TopLeftX);
      stream.next(m.TopLeftY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::foresight_outputs::BoundBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::foresight_outputs::BoundBox_<ContainerAllocator>& v)
  {
    s << indent << "BottomRightX: ";
    Printer<float>::stream(s, indent + "  ", v.BottomRightX);
    s << indent << "BottomRightY: ";
    Printer<float>::stream(s, indent + "  ", v.BottomRightY);
    s << indent << "TopLeftX: ";
    Printer<float>::stream(s, indent + "  ", v.TopLeftX);
    s << indent << "TopLeftY: ";
    Printer<float>::stream(s, indent + "  ", v.TopLeftY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FORESIGHT_OUTPUTS_MESSAGE_BOUNDBOX_H
