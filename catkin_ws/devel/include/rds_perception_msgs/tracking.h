// Generated by gencpp from file rds_perception_msgs/tracking.msg
// DO NOT EDIT!


#ifndef RDS_PERCEPTION_MSGS_MESSAGE_TRACKING_H
#define RDS_PERCEPTION_MSGS_MESSAGE_TRACKING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <rds_perception_msgs/track.h>

namespace rds_perception_msgs
{
template <class ContainerAllocator>
struct tracking_
{
  typedef tracking_<ContainerAllocator> Type;

  tracking_()
    : header()
    , tracks()  {
    }
  tracking_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tracks(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::rds_perception_msgs::track_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rds_perception_msgs::track_<ContainerAllocator> >::other >  _tracks_type;
  _tracks_type tracks;





  typedef boost::shared_ptr< ::rds_perception_msgs::tracking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_perception_msgs::tracking_<ContainerAllocator> const> ConstPtr;

}; // struct tracking_

typedef ::rds_perception_msgs::tracking_<std::allocator<void> > tracking;

typedef boost::shared_ptr< ::rds_perception_msgs::tracking > trackingPtr;
typedef boost::shared_ptr< ::rds_perception_msgs::tracking const> trackingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_perception_msgs::tracking_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_perception_msgs::tracking_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_perception_msgs::tracking_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::tracking_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tracks == rhs.tracks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_perception_msgs::tracking_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::tracking_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::tracking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::tracking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::tracking_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::tracking_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::tracking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::tracking_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_perception_msgs::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a03ed08238f2e628af885c6ceb7c7f9a";
  }

  static const char* value(const ::rds_perception_msgs::tracking_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa03ed08238f2e628ULL;
  static const uint64_t static_value2 = 0xaf885c6ceb7c7f9aULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_perception_msgs::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_perception_msgs/tracking";
  }

  static const char* value(const ::rds_perception_msgs::tracking_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_perception_msgs::tracking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"track[] tracks\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/track\n"
"uint32 id            # unique identifier of the track\n"
"float32[] state      # state\n"
"float32[] covariance # covariance\n"
"label label            # type of the track\n"
"extent extent        # extent model for the track shape representation\n"
"float64 uptime\n"
"float64 misstime\n"
"float32 box_center_x # box center\n"
"float32 box_center_y # box center\n"
"float32 axis_1x      # main axis of the box\n"
"float32 axis_1y      # main axis of the box\n"
"float32 axis_2x      # secondary axis of the box\n"
"float32 axis_2y       # secondary axis of the box\n"
"float32 dim1         # dimension of box along main axis or radius of the circle\n"
"float32 dim2         # dimension of box along secondary axis (or radius of the circle)\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/label\n"
"# Tracking object type\n"
"uint8 LABEL_INVALID = 0\n"
"uint8 LABEL_UNKNOWN = 1\n"
"uint8 LABEL_CAR = 2\n"
"uint8 LABEL_PEDESTRIAN = 3\n"
"uint8 LABEL_BIKE = 4\n"
"\n"
"uint8 label\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/extent\n"
"# Tracking extent type\n"
"uint8 EXTENT_ELLIPSE = 0\n"
"uint8 EXTENT_OBB = 1\n"
"\n"
"uint8 extent\n"
;
  }

  static const char* value(const ::rds_perception_msgs::tracking_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_perception_msgs::tracking_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tracks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tracking_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_perception_msgs::tracking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_perception_msgs::tracking_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tracks[]" << std::endl;
    for (size_t i = 0; i < v.tracks.size(); ++i)
    {
      s << indent << "  tracks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rds_perception_msgs::track_<ContainerAllocator> >::stream(s, indent + "    ", v.tracks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_PERCEPTION_MSGS_MESSAGE_TRACKING_H
