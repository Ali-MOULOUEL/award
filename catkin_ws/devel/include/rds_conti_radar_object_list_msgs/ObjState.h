// Generated by gencpp from file rds_conti_radar_object_list_msgs/ObjState.msg
// DO NOT EDIT!


#ifndef RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_OBJSTATE_H
#define RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_OBJSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_conti_radar_object_list_msgs
{
template <class ContainerAllocator>
struct ObjState_
{
  typedef ObjState_<ContainerAllocator> Type;

  ObjState_()
    : ObjState(0)  {
    }
  ObjState_(const ContainerAllocator& _alloc)
    : ObjState(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ObjState_type;
  _ObjState_type ObjState;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OBJSTATE_DELETED)
  #undef OBJSTATE_DELETED
#endif
#if defined(_WIN32) && defined(OBJSTATE_NEW)
  #undef OBJSTATE_NEW
#endif
#if defined(_WIN32) && defined(OBJSTATE_MEASURED)
  #undef OBJSTATE_MEASURED
#endif
#if defined(_WIN32) && defined(OBJSTATE_PREDICTED)
  #undef OBJSTATE_PREDICTED
#endif

  enum {
    OBJSTATE_DELETED = 0u,
    OBJSTATE_NEW = 1u,
    OBJSTATE_MEASURED = 2u,
    OBJSTATE_PREDICTED = 3u,
  };


  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> const> ConstPtr;

}; // struct ObjState_

typedef ::rds_conti_radar_object_list_msgs::ObjState_<std::allocator<void> > ObjState;

typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::ObjState > ObjStatePtr;
typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::ObjState const> ObjStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator2> & rhs)
{
  return lhs.ObjState == rhs.ObjState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_conti_radar_object_list_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81b9ceedc1cd61a2e377a5bb984f61bb";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81b9ceedc1cd61a2ULL;
  static const uint64_t static_value2 = 0xe377a5bb984f61bbULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_conti_radar_object_list_msgs/ObjState";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Radarobject ObjState field\n"
"uint8 OBJSTATE_DELETED = 0\n"
"uint8 OBJSTATE_NEW = 1\n"
"uint8 OBJSTATE_MEASURED = 2\n"
"uint8 OBJSTATE_PREDICTED = 3\n"
"\n"
"uint8 ObjState\n"
;
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ObjState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_conti_radar_object_list_msgs::ObjState_<ContainerAllocator>& v)
  {
    s << indent << "ObjState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ObjState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_OBJSTATE_H
