# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rds_anticollision/msg_vehicle_state_common.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rds_anticollision.msg
import std_msgs.msg

class msg_vehicle_state_common(genpy.Message):
  _md5sum = "5c4e825550da842f8d9590a064f49c07"
  _type = "rds_anticollision/msg_vehicle_state_common"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

drive_mode drive_mode

motion motion
emergency_stop_root_cause emergency_stop_root_causes
error[] errors
error[] warnings

safety_chain_state safety_chain_state
ability controller_status
ability engagement_ability
start_mission_state start_mission_state

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: rds_anticollision/drive_mode
uint8 DRIVE_MODE_MANUAL = 0 
uint8 DRIVE_MODE_AUTOMATIC = 1
uint8 DRIVE_MODE_TELEOPERATION = 2

uint8 drive_mode

================================================================================
MSG: rds_anticollision/motion
# Motion type
uint8 MOTION_UNKNOWN = 0
uint8 MOTION_MOVING = 1
uint8 MOTION_NULL_SPEED = 2
uint8 MOTION_PARKED = 3

uint8 motion

================================================================================
MSG: rds_anticollision/emergency_stop_root_cause
error[] causes

# Vehicle Context when fired
float32 speed

================================================================================
MSG: rds_anticollision/error
# Generic error
# Value field equals 0 means no error (whatever category is set to)
uint32 category
int32 value

================================================================================
MSG: rds_anticollision/safety_chain_state
uint8 STATE_ACTIVE = 0
uint8 STATE_DISABLED = 1
uint8 STATE_FAILSOFT = 2

uint8 state

================================================================================
MSG: rds_anticollision/ability
int8 ABILITY_NOT_APPLICABLE = -1
int8 ABILITY_NOT_AVAILABLE = 0 
int8 ABILITY_TRUE = 1
int8 ABILITY_FALSE = 2

int8 ability

================================================================================
MSG: rds_anticollision/start_mission_state
uint8 STATE_NOT_SUPPORTED = 0
uint8 STATE_NOT_TRIGGERABLE = 1
uint8 STATE_TRIGGERABLE = 2
uint8 STATE_TRIGGERED = 3

uint8 state
"""
  __slots__ = ['header','drive_mode','motion','emergency_stop_root_causes','errors','warnings','safety_chain_state','controller_status','engagement_ability','start_mission_state']
  _slot_types = ['std_msgs/Header','rds_anticollision/drive_mode','rds_anticollision/motion','rds_anticollision/emergency_stop_root_cause','rds_anticollision/error[]','rds_anticollision/error[]','rds_anticollision/safety_chain_state','rds_anticollision/ability','rds_anticollision/ability','rds_anticollision/start_mission_state']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drive_mode,motion,emergency_stop_root_causes,errors,warnings,safety_chain_state,controller_status,engagement_ability,start_mission_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_vehicle_state_common, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drive_mode is None:
        self.drive_mode = rds_anticollision.msg.drive_mode()
      if self.motion is None:
        self.motion = rds_anticollision.msg.motion()
      if self.emergency_stop_root_causes is None:
        self.emergency_stop_root_causes = rds_anticollision.msg.emergency_stop_root_cause()
      if self.errors is None:
        self.errors = []
      if self.warnings is None:
        self.warnings = []
      if self.safety_chain_state is None:
        self.safety_chain_state = rds_anticollision.msg.safety_chain_state()
      if self.controller_status is None:
        self.controller_status = rds_anticollision.msg.ability()
      if self.engagement_ability is None:
        self.engagement_ability = rds_anticollision.msg.ability()
      if self.start_mission_state is None:
        self.start_mission_state = rds_anticollision.msg.start_mission_state()
    else:
      self.header = std_msgs.msg.Header()
      self.drive_mode = rds_anticollision.msg.drive_mode()
      self.motion = rds_anticollision.msg.motion()
      self.emergency_stop_root_causes = rds_anticollision.msg.emergency_stop_root_cause()
      self.errors = []
      self.warnings = []
      self.safety_chain_state = rds_anticollision.msg.safety_chain_state()
      self.controller_status = rds_anticollision.msg.ability()
      self.engagement_ability = rds_anticollision.msg.ability()
      self.start_mission_state = rds_anticollision.msg.start_mission_state()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.drive_mode.drive_mode, _x.motion.motion))
      length = len(self.emergency_stop_root_causes.causes)
      buff.write(_struct_I.pack(length))
      for val1 in self.emergency_stop_root_causes.causes:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      _x = self.emergency_stop_root_causes.speed
      buff.write(_get_struct_f().pack(_x))
      length = len(self.errors)
      buff.write(_struct_I.pack(length))
      for val1 in self.errors:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      length = len(self.warnings)
      buff.write(_struct_I.pack(length))
      for val1 in self.warnings:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      _x = self
      buff.write(_get_struct_B2bB().pack(_x.safety_chain_state.state, _x.controller_status.ability, _x.engagement_ability.ability, _x.start_mission_state.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drive_mode is None:
        self.drive_mode = rds_anticollision.msg.drive_mode()
      if self.motion is None:
        self.motion = rds_anticollision.msg.motion()
      if self.emergency_stop_root_causes is None:
        self.emergency_stop_root_causes = rds_anticollision.msg.emergency_stop_root_cause()
      if self.errors is None:
        self.errors = None
      if self.warnings is None:
        self.warnings = None
      if self.safety_chain_state is None:
        self.safety_chain_state = rds_anticollision.msg.safety_chain_state()
      if self.controller_status is None:
        self.controller_status = rds_anticollision.msg.ability()
      if self.engagement_ability is None:
        self.engagement_ability = rds_anticollision.msg.ability()
      if self.start_mission_state is None:
        self.start_mission_state = rds_anticollision.msg.start_mission_state()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.drive_mode.drive_mode, _x.motion.motion,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.emergency_stop_root_causes.causes = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.emergency_stop_root_causes.causes.append(val1)
      start = end
      end += 4
      (self.emergency_stop_root_causes.speed,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errors = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.errors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warnings = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.warnings.append(val1)
      _x = self
      start = end
      end += 4
      (_x.safety_chain_state.state, _x.controller_status.ability, _x.engagement_ability.ability, _x.start_mission_state.state,) = _get_struct_B2bB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.drive_mode.drive_mode, _x.motion.motion))
      length = len(self.emergency_stop_root_causes.causes)
      buff.write(_struct_I.pack(length))
      for val1 in self.emergency_stop_root_causes.causes:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      _x = self.emergency_stop_root_causes.speed
      buff.write(_get_struct_f().pack(_x))
      length = len(self.errors)
      buff.write(_struct_I.pack(length))
      for val1 in self.errors:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      length = len(self.warnings)
      buff.write(_struct_I.pack(length))
      for val1 in self.warnings:
        _x = val1
        buff.write(_get_struct_Ii().pack(_x.category, _x.value))
      _x = self
      buff.write(_get_struct_B2bB().pack(_x.safety_chain_state.state, _x.controller_status.ability, _x.engagement_ability.ability, _x.start_mission_state.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drive_mode is None:
        self.drive_mode = rds_anticollision.msg.drive_mode()
      if self.motion is None:
        self.motion = rds_anticollision.msg.motion()
      if self.emergency_stop_root_causes is None:
        self.emergency_stop_root_causes = rds_anticollision.msg.emergency_stop_root_cause()
      if self.errors is None:
        self.errors = None
      if self.warnings is None:
        self.warnings = None
      if self.safety_chain_state is None:
        self.safety_chain_state = rds_anticollision.msg.safety_chain_state()
      if self.controller_status is None:
        self.controller_status = rds_anticollision.msg.ability()
      if self.engagement_ability is None:
        self.engagement_ability = rds_anticollision.msg.ability()
      if self.start_mission_state is None:
        self.start_mission_state = rds_anticollision.msg.start_mission_state()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.drive_mode.drive_mode, _x.motion.motion,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.emergency_stop_root_causes.causes = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.emergency_stop_root_causes.causes.append(val1)
      start = end
      end += 4
      (self.emergency_stop_root_causes.speed,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.errors = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.errors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.warnings = []
      for i in range(0, length):
        val1 = rds_anticollision.msg.error()
        _x = val1
        start = end
        end += 8
        (_x.category, _x.value,) = _get_struct_Ii().unpack(str[start:end])
        self.warnings.append(val1)
      _x = self
      start = end
      end += 4
      (_x.safety_chain_state.state, _x.controller_status.ability, _x.engagement_ability.ability, _x.start_mission_state.state,) = _get_struct_B2bB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2bB = None
def _get_struct_B2bB():
    global _struct_B2bB
    if _struct_B2bB is None:
        _struct_B2bB = struct.Struct("<B2bB")
    return _struct_B2bB
_struct_Ii = None
def _get_struct_Ii():
    global _struct_Ii
    if _struct_Ii is None:
        _struct_Ii = struct.Struct("<Ii")
    return _struct_Ii
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
