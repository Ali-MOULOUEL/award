// Generated by gencpp from file rds_anticollision/error.msg
// DO NOT EDIT!


#ifndef RDS_ANTICOLLISION_MESSAGE_ERROR_H
#define RDS_ANTICOLLISION_MESSAGE_ERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_anticollision
{
template <class ContainerAllocator>
struct error_
{
  typedef error_<ContainerAllocator> Type;

  error_()
    : category(0)
    , value(0)  {
    }
  error_(const ContainerAllocator& _alloc)
    : category(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint32_t _category_type;
  _category_type category;

   typedef int32_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::rds_anticollision::error_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_anticollision::error_<ContainerAllocator> const> ConstPtr;

}; // struct error_

typedef ::rds_anticollision::error_<std::allocator<void> > error;

typedef boost::shared_ptr< ::rds_anticollision::error > errorPtr;
typedef boost::shared_ptr< ::rds_anticollision::error const> errorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_anticollision::error_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_anticollision::error_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_anticollision::error_<ContainerAllocator1> & lhs, const ::rds_anticollision::error_<ContainerAllocator2> & rhs)
{
  return lhs.category == rhs.category &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_anticollision::error_<ContainerAllocator1> & lhs, const ::rds_anticollision::error_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_anticollision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::error_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::error_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::error_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::error_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::error_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_anticollision::error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68f1abf75ea05c1c908b73319245e161";
  }

  static const char* value(const ::rds_anticollision::error_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68f1abf75ea05c1cULL;
  static const uint64_t static_value2 = 0x908b73319245e161ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_anticollision::error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_anticollision/error";
  }

  static const char* value(const ::rds_anticollision::error_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_anticollision::error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Generic error\n"
"# Value field equals 0 means no error (whatever category is set to)\n"
"uint32 category\n"
"int32 value\n"
;
  }

  static const char* value(const ::rds_anticollision::error_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_anticollision::error_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.category);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct error_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_anticollision::error_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_anticollision::error_<ContainerAllocator>& v)
  {
    s << indent << "category: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.category);
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_ANTICOLLISION_MESSAGE_ERROR_H
