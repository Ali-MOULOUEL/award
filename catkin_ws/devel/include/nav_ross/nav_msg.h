// Generated by gencpp from file nav_ross/nav_msg.msg
// DO NOT EDIT!


#ifndef NAV_ROSS_MESSAGE_NAV_MSG_H
#define NAV_ROSS_MESSAGE_NAV_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav_ross
{
template <class ContainerAllocator>
struct nav_msg_
{
  typedef nav_msg_<ContainerAllocator> Type;

  nav_msg_()
    : range_resolution(0.0)
    , AzimuthSamples(0)
    , EncoderSize(0)
    , BinSize(0)
    , RangeInBins(0)
    , ExpectedRotationRate(0)  {
    }
  nav_msg_(const ContainerAllocator& _alloc)
    : range_resolution(0.0)
    , AzimuthSamples(0)
    , EncoderSize(0)
    , BinSize(0)
    , RangeInBins(0)
    , ExpectedRotationRate(0)  {
  (void)_alloc;
    }



   typedef double _range_resolution_type;
  _range_resolution_type range_resolution;

   typedef uint16_t _AzimuthSamples_type;
  _AzimuthSamples_type AzimuthSamples;

   typedef uint16_t _EncoderSize_type;
  _EncoderSize_type EncoderSize;

   typedef uint16_t _BinSize_type;
  _BinSize_type BinSize;

   typedef uint16_t _RangeInBins_type;
  _RangeInBins_type RangeInBins;

   typedef uint16_t _ExpectedRotationRate_type;
  _ExpectedRotationRate_type ExpectedRotationRate;





  typedef boost::shared_ptr< ::nav_ross::nav_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav_ross::nav_msg_<ContainerAllocator> const> ConstPtr;

}; // struct nav_msg_

typedef ::nav_ross::nav_msg_<std::allocator<void> > nav_msg;

typedef boost::shared_ptr< ::nav_ross::nav_msg > nav_msgPtr;
typedef boost::shared_ptr< ::nav_ross::nav_msg const> nav_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav_ross::nav_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav_ross::nav_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nav_ross::nav_msg_<ContainerAllocator1> & lhs, const ::nav_ross::nav_msg_<ContainerAllocator2> & rhs)
{
  return lhs.range_resolution == rhs.range_resolution &&
    lhs.AzimuthSamples == rhs.AzimuthSamples &&
    lhs.EncoderSize == rhs.EncoderSize &&
    lhs.BinSize == rhs.BinSize &&
    lhs.RangeInBins == rhs.RangeInBins &&
    lhs.ExpectedRotationRate == rhs.ExpectedRotationRate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nav_ross::nav_msg_<ContainerAllocator1> & lhs, const ::nav_ross::nav_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nav_ross

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nav_ross::nav_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav_ross::nav_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_ross::nav_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav_ross::nav_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_ross::nav_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav_ross::nav_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav_ross::nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18581dec57d2b4d9e4f4a5bc2f5e3e17";
  }

  static const char* value(const ::nav_ross::nav_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18581dec57d2b4d9ULL;
  static const uint64_t static_value2 = 0xe4f4a5bc2f5e3e17ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav_ross::nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_ross/nav_msg";
  }

  static const char* value(const ::nav_ross::nav_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav_ross::nav_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 range_resolution\n"
"uint16 AzimuthSamples\n"
"uint16 EncoderSize\n"
"uint16 BinSize\n"
"uint16 RangeInBins\n"
"uint16 ExpectedRotationRate\n"
;
  }

  static const char* value(const ::nav_ross::nav_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav_ross::nav_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range_resolution);
      stream.next(m.AzimuthSamples);
      stream.next(m.EncoderSize);
      stream.next(m.BinSize);
      stream.next(m.RangeInBins);
      stream.next(m.ExpectedRotationRate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nav_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav_ross::nav_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav_ross::nav_msg_<ContainerAllocator>& v)
  {
    s << indent << "range_resolution: ";
    Printer<double>::stream(s, indent + "  ", v.range_resolution);
    s << indent << "AzimuthSamples: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.AzimuthSamples);
    s << indent << "EncoderSize: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.EncoderSize);
    s << indent << "BinSize: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.BinSize);
    s << indent << "RangeInBins: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.RangeInBins);
    s << indent << "ExpectedRotationRate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ExpectedRotationRate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV_ROSS_MESSAGE_NAV_MSG_H
