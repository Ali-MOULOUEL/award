// Generated by gencpp from file rds_anticollision/emergency_stop_root_cause.msg
// DO NOT EDIT!


#ifndef RDS_ANTICOLLISION_MESSAGE_EMERGENCY_STOP_ROOT_CAUSE_H
#define RDS_ANTICOLLISION_MESSAGE_EMERGENCY_STOP_ROOT_CAUSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rds_anticollision/error.h>

namespace rds_anticollision
{
template <class ContainerAllocator>
struct emergency_stop_root_cause_
{
  typedef emergency_stop_root_cause_<ContainerAllocator> Type;

  emergency_stop_root_cause_()
    : causes()
    , speed(0.0)  {
    }
  emergency_stop_root_cause_(const ContainerAllocator& _alloc)
    : causes(_alloc)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::rds_anticollision::error_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rds_anticollision::error_<ContainerAllocator> >::other >  _causes_type;
  _causes_type causes;

   typedef float _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> const> ConstPtr;

}; // struct emergency_stop_root_cause_

typedef ::rds_anticollision::emergency_stop_root_cause_<std::allocator<void> > emergency_stop_root_cause;

typedef boost::shared_ptr< ::rds_anticollision::emergency_stop_root_cause > emergency_stop_root_causePtr;
typedef boost::shared_ptr< ::rds_anticollision::emergency_stop_root_cause const> emergency_stop_root_causeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator1> & lhs, const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator2> & rhs)
{
  return lhs.causes == rhs.causes &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator1> & lhs, const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_anticollision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d411f9af8dac62ba702700d1fd92b8e7";
  }

  static const char* value(const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd411f9af8dac62baULL;
  static const uint64_t static_value2 = 0x702700d1fd92b8e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_anticollision/emergency_stop_root_cause";
  }

  static const char* value(const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
{
  static const char* value()
  {
    return "error[] causes\n"
"\n"
"# Vehicle Context when fired\n"
"float32 speed\n"
"\n"
"================================================================================\n"
"MSG: rds_anticollision/error\n"
"# Generic error\n"
"# Value field equals 0 means no error (whatever category is set to)\n"
"uint32 category\n"
"int32 value\n"
;
  }

  static const char* value(const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.causes);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct emergency_stop_root_cause_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_anticollision::emergency_stop_root_cause_<ContainerAllocator>& v)
  {
    s << indent << "causes[]" << std::endl;
    for (size_t i = 0; i < v.causes.size(); ++i)
    {
      s << indent << "  causes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rds_anticollision::error_<ContainerAllocator> >::stream(s, indent + "    ", v.causes[i]);
    }
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_ANTICOLLISION_MESSAGE_EMERGENCY_STOP_ROOT_CAUSE_H
