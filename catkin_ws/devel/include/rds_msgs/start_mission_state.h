// Generated by gencpp from file rds_msgs/start_mission_state.msg
// DO NOT EDIT!


#ifndef RDS_MSGS_MESSAGE_START_MISSION_STATE_H
#define RDS_MSGS_MESSAGE_START_MISSION_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_msgs
{
template <class ContainerAllocator>
struct start_mission_state_
{
  typedef start_mission_state_<ContainerAllocator> Type;

  start_mission_state_()
    : state(0)  {
    }
  start_mission_state_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_NOT_SUPPORTED)
  #undef STATE_NOT_SUPPORTED
#endif
#if defined(_WIN32) && defined(STATE_NOT_TRIGGERABLE)
  #undef STATE_NOT_TRIGGERABLE
#endif
#if defined(_WIN32) && defined(STATE_TRIGGERABLE)
  #undef STATE_TRIGGERABLE
#endif
#if defined(_WIN32) && defined(STATE_TRIGGERED)
  #undef STATE_TRIGGERED
#endif

  enum {
    STATE_NOT_SUPPORTED = 0u,
    STATE_NOT_TRIGGERABLE = 1u,
    STATE_TRIGGERABLE = 2u,
    STATE_TRIGGERED = 3u,
  };


  typedef boost::shared_ptr< ::rds_msgs::start_mission_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_msgs::start_mission_state_<ContainerAllocator> const> ConstPtr;

}; // struct start_mission_state_

typedef ::rds_msgs::start_mission_state_<std::allocator<void> > start_mission_state;

typedef boost::shared_ptr< ::rds_msgs::start_mission_state > start_mission_statePtr;
typedef boost::shared_ptr< ::rds_msgs::start_mission_state const> start_mission_stateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_msgs::start_mission_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_msgs::start_mission_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_msgs::start_mission_state_<ContainerAllocator1> & lhs, const ::rds_msgs::start_mission_state_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_msgs::start_mission_state_<ContainerAllocator1> & lhs, const ::rds_msgs::start_mission_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_msgs::start_mission_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_msgs::start_mission_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_msgs::start_mission_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_msgs::start_mission_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_msgs::start_mission_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_msgs::start_mission_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_msgs::start_mission_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a82ad9077eb8e1a28927c3da9649ad09";
  }

  static const char* value(const ::rds_msgs::start_mission_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa82ad9077eb8e1a2ULL;
  static const uint64_t static_value2 = 0x8927c3da9649ad09ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_msgs::start_mission_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_msgs/start_mission_state";
  }

  static const char* value(const ::rds_msgs::start_mission_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_msgs::start_mission_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 STATE_NOT_SUPPORTED = 0\n"
"uint8 STATE_NOT_TRIGGERABLE = 1\n"
"uint8 STATE_TRIGGERABLE = 2\n"
"uint8 STATE_TRIGGERED = 3\n"
"\n"
"uint8 state\n"
;
  }

  static const char* value(const ::rds_msgs::start_mission_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_msgs::start_mission_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct start_mission_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_msgs::start_mission_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_msgs::start_mission_state_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_MSGS_MESSAGE_START_MISSION_STATE_H
