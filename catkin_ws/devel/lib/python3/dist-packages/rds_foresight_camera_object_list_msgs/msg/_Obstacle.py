# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rds_foresight_camera_object_list_msgs/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rds_foresight_camera_object_list_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "dd899dae8fd4048bf4873b1549287ed9"
  _type = "rds_foresight_camera_object_list_msgs/Obstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Obstacles field
BoundBox boundBox
float32 CenterX
float32 CenterY
string Class
float32 DangerLevel
float32 Distance
float32 ID
bool OnPath
bool OnRoad
float32 PositionX
float32 PositionY
float32 PositionZ
float32 RealHeight
float32 RealWidth 
float32 RelativeSpeed
float32 TTC




 
================================================================================
MSG: rds_foresight_camera_object_list_msgs/BoundBox
#BoundBox field
float32 BottomRightX
float32 BottomRightY
float32 TopLeftX
float32 TopLeftY
"""
  __slots__ = ['boundBox','CenterX','CenterY','Class','DangerLevel','Distance','ID','OnPath','OnRoad','PositionX','PositionY','PositionZ','RealHeight','RealWidth','RelativeSpeed','TTC']
  _slot_types = ['rds_foresight_camera_object_list_msgs/BoundBox','float32','float32','string','float32','float32','float32','bool','bool','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boundBox,CenterX,CenterY,Class,DangerLevel,Distance,ID,OnPath,OnRoad,PositionX,PositionY,PositionZ,RealHeight,RealWidth,RelativeSpeed,TTC

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.boundBox is None:
        self.boundBox = rds_foresight_camera_object_list_msgs.msg.BoundBox()
      if self.CenterX is None:
        self.CenterX = 0.
      if self.CenterY is None:
        self.CenterY = 0.
      if self.Class is None:
        self.Class = ''
      if self.DangerLevel is None:
        self.DangerLevel = 0.
      if self.Distance is None:
        self.Distance = 0.
      if self.ID is None:
        self.ID = 0.
      if self.OnPath is None:
        self.OnPath = False
      if self.OnRoad is None:
        self.OnRoad = False
      if self.PositionX is None:
        self.PositionX = 0.
      if self.PositionY is None:
        self.PositionY = 0.
      if self.PositionZ is None:
        self.PositionZ = 0.
      if self.RealHeight is None:
        self.RealHeight = 0.
      if self.RealWidth is None:
        self.RealWidth = 0.
      if self.RelativeSpeed is None:
        self.RelativeSpeed = 0.
      if self.TTC is None:
        self.TTC = 0.
    else:
      self.boundBox = rds_foresight_camera_object_list_msgs.msg.BoundBox()
      self.CenterX = 0.
      self.CenterY = 0.
      self.Class = ''
      self.DangerLevel = 0.
      self.Distance = 0.
      self.ID = 0.
      self.OnPath = False
      self.OnRoad = False
      self.PositionX = 0.
      self.PositionY = 0.
      self.PositionZ = 0.
      self.RealHeight = 0.
      self.RealWidth = 0.
      self.RelativeSpeed = 0.
      self.TTC = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.boundBox.BottomRightX, _x.boundBox.BottomRightY, _x.boundBox.TopLeftX, _x.boundBox.TopLeftY, _x.CenterX, _x.CenterY))
      _x = self.Class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2B7f().pack(_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundBox is None:
        self.boundBox = rds_foresight_camera_object_list_msgs.msg.BoundBox()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.boundBox.BottomRightX, _x.boundBox.BottomRightY, _x.boundBox.TopLeftX, _x.boundBox.TopLeftY, _x.CenterX, _x.CenterY,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Class = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC,) = _get_struct_3f2B7f().unpack(str[start:end])
      self.OnPath = bool(self.OnPath)
      self.OnRoad = bool(self.OnRoad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.boundBox.BottomRightX, _x.boundBox.BottomRightY, _x.boundBox.TopLeftX, _x.boundBox.TopLeftY, _x.CenterX, _x.CenterY))
      _x = self.Class
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2B7f().pack(_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.boundBox is None:
        self.boundBox = rds_foresight_camera_object_list_msgs.msg.BoundBox()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.boundBox.BottomRightX, _x.boundBox.BottomRightY, _x.boundBox.TopLeftX, _x.boundBox.TopLeftY, _x.CenterX, _x.CenterY,) = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Class = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Class = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC,) = _get_struct_3f2B7f().unpack(str[start:end])
      self.OnPath = bool(self.OnPath)
      self.OnRoad = bool(self.OnRoad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f2B7f = None
def _get_struct_3f2B7f():
    global _struct_3f2B7f
    if _struct_3f2B7f is None:
        _struct_3f2B7f = struct.Struct("<3f2B7f")
    return _struct_3f2B7f
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
