// Generated by gencpp from file rds_anticollision/ability.msg
// DO NOT EDIT!


#ifndef RDS_ANTICOLLISION_MESSAGE_ABILITY_H
#define RDS_ANTICOLLISION_MESSAGE_ABILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_anticollision
{
template <class ContainerAllocator>
struct ability_
{
  typedef ability_<ContainerAllocator> Type;

  ability_()
    : ability(0)  {
    }
  ability_(const ContainerAllocator& _alloc)
    : ability(0)  {
  (void)_alloc;
    }



   typedef int8_t _ability_type;
  _ability_type ability;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ABILITY_NOT_APPLICABLE)
  #undef ABILITY_NOT_APPLICABLE
#endif
#if defined(_WIN32) && defined(ABILITY_NOT_AVAILABLE)
  #undef ABILITY_NOT_AVAILABLE
#endif
#if defined(_WIN32) && defined(ABILITY_TRUE)
  #undef ABILITY_TRUE
#endif
#if defined(_WIN32) && defined(ABILITY_FALSE)
  #undef ABILITY_FALSE
#endif

  enum {
    ABILITY_NOT_APPLICABLE = -1,
    ABILITY_NOT_AVAILABLE = 0,
    ABILITY_TRUE = 1,
    ABILITY_FALSE = 2,
  };


  typedef boost::shared_ptr< ::rds_anticollision::ability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_anticollision::ability_<ContainerAllocator> const> ConstPtr;

}; // struct ability_

typedef ::rds_anticollision::ability_<std::allocator<void> > ability;

typedef boost::shared_ptr< ::rds_anticollision::ability > abilityPtr;
typedef boost::shared_ptr< ::rds_anticollision::ability const> abilityConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_anticollision::ability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_anticollision::ability_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_anticollision::ability_<ContainerAllocator1> & lhs, const ::rds_anticollision::ability_<ContainerAllocator2> & rhs)
{
  return lhs.ability == rhs.ability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_anticollision::ability_<ContainerAllocator1> & lhs, const ::rds_anticollision::ability_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_anticollision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::ability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_anticollision::ability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::ability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_anticollision::ability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::ability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_anticollision::ability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_anticollision::ability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a11a918a995a6a669d08889ae70ed8d";
  }

  static const char* value(const ::rds_anticollision::ability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a11a918a995a6a6ULL;
  static const uint64_t static_value2 = 0x69d08889ae70ed8dULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_anticollision::ability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_anticollision/ability";
  }

  static const char* value(const ::rds_anticollision::ability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_anticollision::ability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 ABILITY_NOT_APPLICABLE = -1\n"
"int8 ABILITY_NOT_AVAILABLE = 0 \n"
"int8 ABILITY_TRUE = 1\n"
"int8 ABILITY_FALSE = 2\n"
"\n"
"int8 ability\n"
;
  }

  static const char* value(const ::rds_anticollision::ability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_anticollision::ability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_anticollision::ability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_anticollision::ability_<ContainerAllocator>& v)
  {
    s << indent << "ability: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_ANTICOLLISION_MESSAGE_ABILITY_H
