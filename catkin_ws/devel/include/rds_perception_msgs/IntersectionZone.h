// Generated by gencpp from file rds_perception_msgs/IntersectionZone.msg
// DO NOT EDIT!


#ifndef RDS_PERCEPTION_MSGS_MESSAGE_INTERSECTIONZONE_H
#define RDS_PERCEPTION_MSGS_MESSAGE_INTERSECTIONZONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rds_perception_msgs/label.h>

namespace rds_perception_msgs
{
template <class ContainerAllocator>
struct IntersectionZone_
{
  typedef IntersectionZone_<ContainerAllocator> Type;

  IntersectionZone_()
    : provider(0)
    , ignored_blind_obstacles()  {
    }
  IntersectionZone_(const ContainerAllocator& _alloc)
    : provider(0)
    , ignored_blind_obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _provider_type;
  _provider_type provider;

   typedef std::vector< ::rds_perception_msgs::label_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rds_perception_msgs::label_<ContainerAllocator> >::other >  _ignored_blind_obstacles_type;
  _ignored_blind_obstacles_type ignored_blind_obstacles;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PROVIDER_PERCEPTION)
  #undef PROVIDER_PERCEPTION
#endif
#if defined(_WIN32) && defined(PROVIDER_ADS_B)
  #undef PROVIDER_ADS_B
#endif

  enum {
    PROVIDER_PERCEPTION = 1u,
    PROVIDER_ADS_B = 2u,
  };


  typedef boost::shared_ptr< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> const> ConstPtr;

}; // struct IntersectionZone_

typedef ::rds_perception_msgs::IntersectionZone_<std::allocator<void> > IntersectionZone;

typedef boost::shared_ptr< ::rds_perception_msgs::IntersectionZone > IntersectionZonePtr;
typedef boost::shared_ptr< ::rds_perception_msgs::IntersectionZone const> IntersectionZoneConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator2> & rhs)
{
  return lhs.provider == rhs.provider &&
    lhs.ignored_blind_obstacles == rhs.ignored_blind_obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42dde0da16a1fa71a8c22e5108233e9c";
  }

  static const char* value(const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42dde0da16a1fa71ULL;
  static const uint64_t static_value2 = 0xa8c22e5108233e9cULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_perception_msgs/IntersectionZone";
  }

  static const char* value(const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PROVIDER_PERCEPTION = 1\n"
"uint8 PROVIDER_ADS_B = 2\n"
"uint8 provider\n"
"\n"
"#geometry_msgs/Polygon area\n"
"\n"
"# Filled only when provider is perception based\n"
"rds_perception_msgs/label[] ignored_blind_obstacles\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/label\n"
"# Tracking object type\n"
"uint8 LABEL_INVALID = 0\n"
"uint8 LABEL_UNKNOWN = 1\n"
"uint8 LABEL_CAR = 2\n"
"uint8 LABEL_PEDESTRIAN = 3\n"
"uint8 LABEL_BIKE = 4\n"
"\n"
"uint8 label\n"
;
  }

  static const char* value(const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.provider);
      stream.next(m.ignored_blind_obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntersectionZone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_perception_msgs::IntersectionZone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_perception_msgs::IntersectionZone_<ContainerAllocator>& v)
  {
    s << indent << "provider: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.provider);
    s << indent << "ignored_blind_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.ignored_blind_obstacles.size(); ++i)
    {
      s << indent << "  ignored_blind_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rds_perception_msgs::label_<ContainerAllocator> >::stream(s, indent + "    ", v.ignored_blind_obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_PERCEPTION_MSGS_MESSAGE_INTERSECTIONZONE_H
