// Generated by gencpp from file rds_conti_radar_object_list_msgs/LDeltaQual.msg
// DO NOT EDIT!


#ifndef RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_LDELTAQUAL_H
#define RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_LDELTAQUAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_conti_radar_object_list_msgs
{
template <class ContainerAllocator>
struct LDeltaQual_
{
  typedef LDeltaQual_<ContainerAllocator> Type;

  LDeltaQual_()
    : LDeltaQual(0)  {
    }
  LDeltaQual_(const ContainerAllocator& _alloc)
    : LDeltaQual(0)  {
  (void)_alloc;
    }



   typedef uint8_t _LDeltaQual_type;
  _LDeltaQual_type LDeltaQual;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LDELTAQUAL_ALL_INVALID)
  #undef LDELTAQUAL_ALL_INVALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_LEFT_VALID)
  #undef LDELTAQUAL_LEFT_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_MID_VALID)
  #undef LDELTAQUAL_MID_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_LEFT_MID_VALID)
  #undef LDELTAQUAL_LEFT_MID_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_RIGHT_VALID)
  #undef LDELTAQUAL_RIGHT_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_RIGHT_LEFT_VALID)
  #undef LDELTAQUAL_RIGHT_LEFT_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_RIGHT_MID_VALID)
  #undef LDELTAQUAL_RIGHT_MID_VALID
#endif
#if defined(_WIN32) && defined(LDELTAQUAL_ALL_VALID)
  #undef LDELTAQUAL_ALL_VALID
#endif

  enum {
    LDELTAQUAL_ALL_INVALID = 0u,
    LDELTAQUAL_LEFT_VALID = 1u,
    LDELTAQUAL_MID_VALID = 2u,
    LDELTAQUAL_LEFT_MID_VALID = 3u,
    LDELTAQUAL_RIGHT_VALID = 4u,
    LDELTAQUAL_RIGHT_LEFT_VALID = 5u,
    LDELTAQUAL_RIGHT_MID_VALID = 6u,
    LDELTAQUAL_ALL_VALID = 7u,
  };


  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> const> ConstPtr;

}; // struct LDeltaQual_

typedef ::rds_conti_radar_object_list_msgs::LDeltaQual_<std::allocator<void> > LDeltaQual;

typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::LDeltaQual > LDeltaQualPtr;
typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::LDeltaQual const> LDeltaQualConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator2> & rhs)
{
  return lhs.LDeltaQual == rhs.LDeltaQual;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_conti_radar_object_list_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46a34ed6db73a66ffc285aa58260c6bd";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46a34ed6db73a66fULL;
  static const uint64_t static_value2 = 0xfc285aa58260c6bdULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_conti_radar_object_list_msgs/LDeltaQual";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#RadarObject LDeltaQual field : Quality of OBB distances\n"
"uint8 LDELTAQUAL_ALL_INVALID = 0\n"
"uint8 LDELTAQUAL_LEFT_VALID =1\n"
"uint8 LDELTAQUAL_MID_VALID = 2\n"
"uint8 LDELTAQUAL_LEFT_MID_VALID = 3\n"
"uint8 LDELTAQUAL_RIGHT_VALID = 4\n"
"uint8 LDELTAQUAL_RIGHT_LEFT_VALID = 5\n"
"uint8 LDELTAQUAL_RIGHT_MID_VALID = 6\n"
"uint8 LDELTAQUAL_ALL_VALID = 7\n"
"\n"
"uint8 LDeltaQual\n"
;
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LDeltaQual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LDeltaQual_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_conti_radar_object_list_msgs::LDeltaQual_<ContainerAllocator>& v)
  {
    s << indent << "LDeltaQual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LDeltaQual);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_LDELTAQUAL_H
