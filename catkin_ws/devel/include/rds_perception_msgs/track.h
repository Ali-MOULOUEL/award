// Generated by gencpp from file rds_perception_msgs/track.msg
// DO NOT EDIT!


#ifndef RDS_PERCEPTION_MSGS_MESSAGE_TRACK_H
#define RDS_PERCEPTION_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rds_perception_msgs/label.h>
#include <rds_perception_msgs/extent.h>

namespace rds_perception_msgs
{
template <class ContainerAllocator>
struct track_
{
  typedef track_<ContainerAllocator> Type;

  track_()
    : id(0)
    , state()
    , covariance()
    , label()
    , extent()
    , uptime(0.0)
    , misstime(0.0)
    , box_center_x(0.0)
    , box_center_y(0.0)
    , axis_1x(0.0)
    , axis_1y(0.0)
    , axis_2x(0.0)
    , axis_2y(0.0)
    , dim1(0.0)
    , dim2(0.0)  {
    }
  track_(const ContainerAllocator& _alloc)
    : id(0)
    , state(_alloc)
    , covariance(_alloc)
    , label(_alloc)
    , extent(_alloc)
    , uptime(0.0)
    , misstime(0.0)
    , box_center_x(0.0)
    , box_center_y(0.0)
    , axis_1x(0.0)
    , axis_1y(0.0)
    , axis_2x(0.0)
    , axis_2y(0.0)
    , dim1(0.0)
    , dim2(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_type;
  _state_type state;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _covariance_type;
  _covariance_type covariance;

   typedef  ::rds_perception_msgs::label_<ContainerAllocator>  _label_type;
  _label_type label;

   typedef  ::rds_perception_msgs::extent_<ContainerAllocator>  _extent_type;
  _extent_type extent;

   typedef double _uptime_type;
  _uptime_type uptime;

   typedef double _misstime_type;
  _misstime_type misstime;

   typedef float _box_center_x_type;
  _box_center_x_type box_center_x;

   typedef float _box_center_y_type;
  _box_center_y_type box_center_y;

   typedef float _axis_1x_type;
  _axis_1x_type axis_1x;

   typedef float _axis_1y_type;
  _axis_1y_type axis_1y;

   typedef float _axis_2x_type;
  _axis_2x_type axis_2x;

   typedef float _axis_2y_type;
  _axis_2y_type axis_2y;

   typedef float _dim1_type;
  _dim1_type dim1;

   typedef float _dim2_type;
  _dim2_type dim2;





  typedef boost::shared_ptr< ::rds_perception_msgs::track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_perception_msgs::track_<ContainerAllocator> const> ConstPtr;

}; // struct track_

typedef ::rds_perception_msgs::track_<std::allocator<void> > track;

typedef boost::shared_ptr< ::rds_perception_msgs::track > trackPtr;
typedef boost::shared_ptr< ::rds_perception_msgs::track const> trackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_perception_msgs::track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_perception_msgs::track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_perception_msgs::track_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::track_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.state == rhs.state &&
    lhs.covariance == rhs.covariance &&
    lhs.label == rhs.label &&
    lhs.extent == rhs.extent &&
    lhs.uptime == rhs.uptime &&
    lhs.misstime == rhs.misstime &&
    lhs.box_center_x == rhs.box_center_x &&
    lhs.box_center_y == rhs.box_center_y &&
    lhs.axis_1x == rhs.axis_1x &&
    lhs.axis_1y == rhs.axis_1y &&
    lhs.axis_2x == rhs.axis_2x &&
    lhs.axis_2y == rhs.axis_2y &&
    lhs.dim1 == rhs.dim1 &&
    lhs.dim2 == rhs.dim2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_perception_msgs::track_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::track_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_perception_msgs::track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8e1e3a8013bff6348f166fe006c2c91";
  }

  static const char* value(const ::rds_perception_msgs::track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8e1e3a8013bff63ULL;
  static const uint64_t static_value2 = 0x48f166fe006c2c91ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_perception_msgs::track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_perception_msgs/track";
  }

  static const char* value(const ::rds_perception_msgs::track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_perception_msgs::track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id            # unique identifier of the track\n"
"float32[] state      # state\n"
"float32[] covariance # covariance\n"
"label label            # type of the track\n"
"extent extent        # extent model for the track shape representation\n"
"float64 uptime\n"
"float64 misstime\n"
"float32 box_center_x # box center\n"
"float32 box_center_y # box center\n"
"float32 axis_1x      # main axis of the box\n"
"float32 axis_1y      # main axis of the box\n"
"float32 axis_2x      # secondary axis of the box\n"
"float32 axis_2y       # secondary axis of the box\n"
"float32 dim1         # dimension of box along main axis or radius of the circle\n"
"float32 dim2         # dimension of box along secondary axis (or radius of the circle)\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/label\n"
"# Tracking object type\n"
"uint8 LABEL_INVALID = 0\n"
"uint8 LABEL_UNKNOWN = 1\n"
"uint8 LABEL_CAR = 2\n"
"uint8 LABEL_PEDESTRIAN = 3\n"
"uint8 LABEL_BIKE = 4\n"
"\n"
"uint8 label\n"
"\n"
"================================================================================\n"
"MSG: rds_perception_msgs/extent\n"
"# Tracking extent type\n"
"uint8 EXTENT_ELLIPSE = 0\n"
"uint8 EXTENT_OBB = 1\n"
"\n"
"uint8 extent\n"
;
  }

  static const char* value(const ::rds_perception_msgs::track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_perception_msgs::track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.state);
      stream.next(m.covariance);
      stream.next(m.label);
      stream.next(m.extent);
      stream.next(m.uptime);
      stream.next(m.misstime);
      stream.next(m.box_center_x);
      stream.next(m.box_center_y);
      stream.next(m.axis_1x);
      stream.next(m.axis_1y);
      stream.next(m.axis_2x);
      stream.next(m.axis_2y);
      stream.next(m.dim1);
      stream.next(m.dim2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_perception_msgs::track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_perception_msgs::track_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "label: ";
    s << std::endl;
    Printer< ::rds_perception_msgs::label_<ContainerAllocator> >::stream(s, indent + "  ", v.label);
    s << indent << "extent: ";
    s << std::endl;
    Printer< ::rds_perception_msgs::extent_<ContainerAllocator> >::stream(s, indent + "  ", v.extent);
    s << indent << "uptime: ";
    Printer<double>::stream(s, indent + "  ", v.uptime);
    s << indent << "misstime: ";
    Printer<double>::stream(s, indent + "  ", v.misstime);
    s << indent << "box_center_x: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_x);
    s << indent << "box_center_y: ";
    Printer<float>::stream(s, indent + "  ", v.box_center_y);
    s << indent << "axis_1x: ";
    Printer<float>::stream(s, indent + "  ", v.axis_1x);
    s << indent << "axis_1y: ";
    Printer<float>::stream(s, indent + "  ", v.axis_1y);
    s << indent << "axis_2x: ";
    Printer<float>::stream(s, indent + "  ", v.axis_2x);
    s << indent << "axis_2y: ";
    Printer<float>::stream(s, indent + "  ", v.axis_2y);
    s << indent << "dim1: ";
    Printer<float>::stream(s, indent + "  ", v.dim1);
    s << indent << "dim2: ";
    Printer<float>::stream(s, indent + "  ", v.dim2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_PERCEPTION_MSGS_MESSAGE_TRACK_H
