# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from foresight_outputs/Frames.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import foresight_outputs.msg

class Frames(genpy.Message):
  _md5sum = "6dd6fdfb9993038c0bfc63e5d2095638"
  _type = "foresight_outputs/Frames"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Frames field 
uint32 FrameIndex
float64 FrameTime
Obstacle[] obstacles_array

================================================================================
MSG: foresight_outputs/Obstacle
#Obstacles field
BoundBox boundBox
float32 CenterX
float32 CenterY
string Class
float32 DangerLevel
float32 Distance
float32 ID
bool OnPath
bool OnRoad
float32 PositionX
float32 PositionY
float32 PositionZ
float32 RealHeight
float32 RealWidth 
float32 RelativeSpeed
float32 TTC




 
================================================================================
MSG: foresight_outputs/BoundBox
#BoundBox field
float32 BottomRightX
float32 BottomRightY
float32 TopLeftX
float32 TopLeftY
"""
  __slots__ = ['FrameIndex','FrameTime','obstacles_array']
  _slot_types = ['uint32','float64','foresight_outputs/Obstacle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       FrameIndex,FrameTime,obstacles_array

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frames, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.FrameIndex is None:
        self.FrameIndex = 0
      if self.FrameTime is None:
        self.FrameTime = 0.
      if self.obstacles_array is None:
        self.obstacles_array = []
    else:
      self.FrameIndex = 0
      self.FrameTime = 0.
      self.obstacles_array = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Id().pack(_x.FrameIndex, _x.FrameTime))
      length = len(self.obstacles_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_array:
        _v1 = val1.boundBox
        _x = _v1
        buff.write(_get_struct_4f().pack(_x.BottomRightX, _x.BottomRightY, _x.TopLeftX, _x.TopLeftY))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.CenterX, _x.CenterY))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f2B7f().pack(_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles_array is None:
        self.obstacles_array = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.FrameIndex, _x.FrameTime,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_array = []
      for i in range(0, length):
        val1 = foresight_outputs.msg.Obstacle()
        _v2 = val1.boundBox
        _x = _v2
        start = end
        end += 16
        (_x.BottomRightX, _x.BottomRightY, _x.TopLeftX, _x.TopLeftY,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC,) = _get_struct_3f2B7f().unpack(str[start:end])
        val1.OnPath = bool(val1.OnPath)
        val1.OnRoad = bool(val1.OnRoad)
        self.obstacles_array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Id().pack(_x.FrameIndex, _x.FrameTime))
      length = len(self.obstacles_array)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles_array:
        _v3 = val1.boundBox
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.BottomRightX, _x.BottomRightY, _x.TopLeftX, _x.TopLeftY))
        _x = val1
        buff.write(_get_struct_2f().pack(_x.CenterX, _x.CenterY))
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_3f2B7f().pack(_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacles_array is None:
        self.obstacles_array = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.FrameIndex, _x.FrameTime,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles_array = []
      for i in range(0, length):
        val1 = foresight_outputs.msg.Obstacle()
        _v4 = val1.boundBox
        _x = _v4
        start = end
        end += 16
        (_x.BottomRightX, _x.BottomRightY, _x.TopLeftX, _x.TopLeftY,) = _get_struct_4f().unpack(str[start:end])
        _x = val1
        start = end
        end += 8
        (_x.CenterX, _x.CenterY,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.Class = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.DangerLevel, _x.Distance, _x.ID, _x.OnPath, _x.OnRoad, _x.PositionX, _x.PositionY, _x.PositionZ, _x.RealHeight, _x.RealWidth, _x.RelativeSpeed, _x.TTC,) = _get_struct_3f2B7f().unpack(str[start:end])
        val1.OnPath = bool(val1.OnPath)
        val1.OnRoad = bool(val1.OnRoad)
        self.obstacles_array.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3f2B7f = None
def _get_struct_3f2B7f():
    global _struct_3f2B7f
    if _struct_3f2B7f is None:
        _struct_3f2B7f = struct.Struct("<3f2B7f")
    return _struct_3f2B7f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
