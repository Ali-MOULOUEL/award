// Generated by gencpp from file rds_perception_msgs/extent.msg
// DO NOT EDIT!


#ifndef RDS_PERCEPTION_MSGS_MESSAGE_EXTENT_H
#define RDS_PERCEPTION_MSGS_MESSAGE_EXTENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_perception_msgs
{
template <class ContainerAllocator>
struct extent_
{
  typedef extent_<ContainerAllocator> Type;

  extent_()
    : extent(0)  {
    }
  extent_(const ContainerAllocator& _alloc)
    : extent(0)  {
  (void)_alloc;
    }



   typedef uint8_t _extent_type;
  _extent_type extent;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EXTENT_ELLIPSE)
  #undef EXTENT_ELLIPSE
#endif
#if defined(_WIN32) && defined(EXTENT_OBB)
  #undef EXTENT_OBB
#endif

  enum {
    EXTENT_ELLIPSE = 0u,
    EXTENT_OBB = 1u,
  };


  typedef boost::shared_ptr< ::rds_perception_msgs::extent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_perception_msgs::extent_<ContainerAllocator> const> ConstPtr;

}; // struct extent_

typedef ::rds_perception_msgs::extent_<std::allocator<void> > extent;

typedef boost::shared_ptr< ::rds_perception_msgs::extent > extentPtr;
typedef boost::shared_ptr< ::rds_perception_msgs::extent const> extentConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_perception_msgs::extent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_perception_msgs::extent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_perception_msgs::extent_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::extent_<ContainerAllocator2> & rhs)
{
  return lhs.extent == rhs.extent;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_perception_msgs::extent_<ContainerAllocator1> & lhs, const ::rds_perception_msgs::extent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::extent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_perception_msgs::extent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::extent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_perception_msgs::extent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::extent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_perception_msgs::extent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_perception_msgs::extent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54d45419b8a9fa808fd73d0379c42304";
  }

  static const char* value(const ::rds_perception_msgs::extent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54d45419b8a9fa80ULL;
  static const uint64_t static_value2 = 0x8fd73d0379c42304ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_perception_msgs::extent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_perception_msgs/extent";
  }

  static const char* value(const ::rds_perception_msgs::extent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_perception_msgs::extent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Tracking extent type\n"
"uint8 EXTENT_ELLIPSE = 0\n"
"uint8 EXTENT_OBB = 1\n"
"\n"
"uint8 extent\n"
;
  }

  static const char* value(const ::rds_perception_msgs::extent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_perception_msgs::extent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.extent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct extent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_perception_msgs::extent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_perception_msgs::extent_<ContainerAllocator>& v)
  {
    s << indent << "extent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_PERCEPTION_MSGS_MESSAGE_EXTENT_H
