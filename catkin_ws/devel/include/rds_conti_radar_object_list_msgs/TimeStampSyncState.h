// Generated by gencpp from file rds_conti_radar_object_list_msgs/TimeStampSyncState.msg
// DO NOT EDIT!


#ifndef RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_TIMESTAMPSYNCSTATE_H
#define RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_TIMESTAMPSYNCSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rds_conti_radar_object_list_msgs
{
template <class ContainerAllocator>
struct TimeStampSyncState_
{
  typedef TimeStampSyncState_<ContainerAllocator> Type;

  TimeStampSyncState_()
    : TimeStampSyncState(0)  {
    }
  TimeStampSyncState_(const ContainerAllocator& _alloc)
    : TimeStampSyncState(0)  {
  (void)_alloc;
    }



   typedef uint8_t _TimeStampSyncState_type;
  _TimeStampSyncState_type TimeStampSyncState;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TIMESTAMPSYNCSTATE_UNKNOWN_SYNC)
  #undef TIMESTAMPSYNCSTATE_UNKNOWN_SYNC
#endif
#if defined(_WIN32) && defined(TIMESTAMPSYNCSTATE_NOT_SYNCED)
  #undef TIMESTAMPSYNCSTATE_NOT_SYNCED
#endif
#if defined(_WIN32) && defined(TIMESTAMPSYNCSTATE_SYNCED_GTC)
  #undef TIMESTAMPSYNCSTATE_SYNCED_GTC
#endif
#if defined(_WIN32) && defined(TIMESTAMPSYNCSTATE_SYNCED_PTP)
  #undef TIMESTAMPSYNCSTATE_SYNCED_PTP
#endif
#if defined(_WIN32) && defined(TIMESTAMPSYNCSTATE_SYNCED_REPLAY)
  #undef TIMESTAMPSYNCSTATE_SYNCED_REPLAY
#endif

  enum {
    TIMESTAMPSYNCSTATE_UNKNOWN_SYNC = 0u,
    TIMESTAMPSYNCSTATE_NOT_SYNCED = 1u,
    TIMESTAMPSYNCSTATE_SYNCED_GTC = 2u,
    TIMESTAMPSYNCSTATE_SYNCED_PTP = 3u,
    TIMESTAMPSYNCSTATE_SYNCED_REPLAY = 4u,
  };


  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> const> ConstPtr;

}; // struct TimeStampSyncState_

typedef ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<std::allocator<void> > TimeStampSyncState;

typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::TimeStampSyncState > TimeStampSyncStatePtr;
typedef boost::shared_ptr< ::rds_conti_radar_object_list_msgs::TimeStampSyncState const> TimeStampSyncStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator2> & rhs)
{
  return lhs.TimeStampSyncState == rhs.TimeStampSyncState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator1> & lhs, const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rds_conti_radar_object_list_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "951c6e7c01586103049a126c68595609";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x951c6e7c01586103ULL;
  static const uint64_t static_value2 = 0x049a126c68595609ULL;
};

template<class ContainerAllocator>
struct DataType< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rds_conti_radar_object_list_msgs/TimeStampSyncState";
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#MsgHeader field TimeStampSyncState\n"
"uint8 TIMESTAMPSYNCSTATE_UNKNOWN_SYNC = 0              #No information on the sync state at all\n"
"uint8 TIMESTAMPSYNCSTATE_NOT_SYNCED = 1                #timestamp is not synced at all\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_GTC = 2                #timestamp is synced with GTC mechanism\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_PTP = 3                #timestamp is synced with PTP mechanism\n"
"uint8 TIMESTAMPSYNCSTATE_SYNCED_REPLAY = 4             #timestamp is synced by replay mechanism\n"
"\n"
"uint8 TimeStampSyncState\n"
;
  }

  static const char* value(const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TimeStampSyncState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimeStampSyncState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rds_conti_radar_object_list_msgs::TimeStampSyncState_<ContainerAllocator>& v)
  {
    s << indent << "TimeStampSyncState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TimeStampSyncState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RDS_CONTI_RADAR_OBJECT_LIST_MSGS_MESSAGE_TIMESTAMPSYNCSTATE_H
